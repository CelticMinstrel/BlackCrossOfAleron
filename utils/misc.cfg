#textdomain wesnoth-drusi

#define EXPERIENCE_MOD
	experience_modifier=90
#enddef

#define MAKE_SPECIAL ID
	[object]
		silent=yes
		duration=forever
		[filter]
			id={ID}
		[/filter]
		[effect]
			apply_to=ellipse
			ellipse="ellipse/star"
		[/effect]
	[/object]
#enddef

#define ENABLE_TROLL_SHAMAN
	[event]
		name=recruit,recall
		first_time_only=no
		id=troll_whelp_to_troll_shaman
		[filter]
			type=Troll Whelp
		[/filter]
		[modify_unit]
			[filter]
				x,y=$x1,$y1
			[/filter]
			advances_to=Troll,Troll Rocklobber,Troll Shaman
		[/modify_unit]
	[/event]
#enddef

#define RECRUITS EASY_VALUE MEDIUM_VALUE HARD_VALUE
	# Vary recruits by difficulty. It's assumed to be cumulative, so that
	# on hard difficulty all the recruits from easy and medium are also
	# included. Intended for use with enemies (since this is the inverse
	# of the behaviour you would want for the player)
	{QUANTITY recruits {EASY_VALUE} {EASY_VALUE},{MEDIUM_VALUE} {EASY_VALUE},{MEDIUM_VALUE},{HARD_VALUE}}
#enddef

#define CANNOT_MOVE_THIS_TURN SIDE
	placement=map_passable
	[variables]
		stare_down=yes
	[/variables]
	[event]
		id=stare_down_event
		name="side {SIDE} turn refresh"
		first_time_only=no
		[store_unit]
			[filter]
				[filter_wml]
					[variables]
						stare_down=yes
					[/variables]
				[/filter_wml]
			[/filter]
			variable=motionless
		[/store_unit]
		{DEBUG_MSG "Filter found $motionless.length units to render motionless!"}
		{FOREACH motionless i}
			{DEBUG_MSG "Freezing unit $motionless[$i].id of type $motionless[$i].type!"}
			[set_variable]
				name=motionless[$i].variables.stare_down
				value=no
			[/set_variable]
			[set_variable]
				name=motionless[$i].moves
				value=0
			[/set_variable]
			[set_variable]
				name=motionless[$i].attacks_left
				value=0
			[/set_variable]
			[unstore_unit]
				variable=motionless[$i]
			[/unstore_unit]
		{NEXT i}
	[/event]
#enddef

#define PRELOAD_EVENT
	[event]
		name=preload
		[lua]
			code=<<wesnoth.dofile("~add-ons/DruidSiege/utils/unit-status.lua")>>
		[/lua]
	[/event]
#enddef

#define SCATTER_RANDOM_UNITS NUMBER TYPES FILTER UNIT_WML
	{REPEAT {NUMBER} (
		[store_locations]
			{FILTER}
			variable=SRU_locations
		[/store_locations]
		[if]
			[variable]
				name=SRU_locations.length
				greater_than=0
			[/variable]
			[then]
				[set_variable]
					name=SRU_type
					rand={TYPES}
				[/set_variable]
				[set_variable]
					name=SRU_loc
					rand=1..$SRU_locations.length
				[/set_variable]
				[unit]
					type=$SRU_type
					x=$SRU_locations[$SRU_loc].x
					y=$SRU_locations[$SRU_loc].y
					{UNIT_WML}
				[/unit]
			[/then]
		[/if]
	)}
	[clear_variable]
		name=SRU_locations,SRU_type,SRU_loc
	[/clear_variable]
#enddef