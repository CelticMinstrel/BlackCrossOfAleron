#textdomain wesnoth-drusi

#define DOMINATION_FILTER
	level=0
	[filter_adjacent]
		ability=dominate
		count=1
		is_enemy=yes
	[/filter_adjacent]
#enddef

#define DOMINATED_FILTER
	side=1
	[filter_wml]
		[status]
			dominated=yes
		[/status]
	[/filter_wml]
	[not]
		[filter_adjacent]
			ability=dominate
			is_enemy=no
			count=1
		[/filter_adjacent]
	[/not]
#enddef

#define DOMINATE_EVENTS
	[event]
		name=new turn
		id=domination_release
		first_time_only=no
		delayed_variable_substitution=yes
		[filter_condition]
			[have_unit]
				{DOMINATED_FILTER}
			[/have_unit]
		[/filter_condition]
#		{DEBUG_MSG "Releasing units!"}
		[store_unit]
			[filter]
				{DOMINATED_FILTER}
			[/filter]
			variable=dominated_units
		[/store_unit]
		{FOREACH dominated_units dominated_unit}
			[scroll_to_unit]
				id=$dominated_units[$dominated_unit].id
			[/scroll_to_unit]
			[animate_unit]
				flag=healed
				text=_"released!"
				female_text=_"female^released!"
				red,green,blue=0,128,50
				[filter]
					id=$dominated_units[$dominated_unit].id
				[/filter]
			[/animate_unit]
			[modify_unit]
				[filter]
					id=$dominated_units[$dominated_unit].id
				[/filter]
				side=$dominated_units[$dominated_unit].variables.was_side
				[status]
					dominated=no
				[/status]
			[/modify_unit]
			[delay]
				time=300
			[/delay]
		{NEXT dominated_unit}
		{CLEAR_VARIABLE dominated_units}
	[/event]
	[event]
		name=advance
		id=domination_escape
		first_time_only=no
		[filter_condition]
			[have_unit]
				id=$unit.id
				[filter_wml]
					[status]
						dominated=yes
					[/status]
				[/filter_wml]
			[/have_unit]
		[/filter_condition]
#		{DEBUG_MSG "Dominated unit levelled up!"}
		[scroll_to_unit]
			id=$unit.id
		[/scroll_to_unit]
		[animate_unit]
			flag=healed
			text=_"released!"
			female_text=_"female^released!"
			red,green,blue=0,128,50
			[filter]
				id=$unit.id
			[/filter]
		[/animate_unit]
		[modify_unit]
			[filter]
				id=$unit.id
			[/filter]
			side=$unit.variables.was_side
			[status]
				dominated=no
			[/status]
		[/modify_unit]
		[delay]
			time=300
		[/delay]
	[/event]
	# TODO: Release all dominated units on scenario end
	[event]
		name=attacker hits
		id=domination_plague_offense
		first_time_only=no
		[filter]
			side=1
			[filter_wml]
				[status]
					dominated=yes
				[/status]
			[/filter_wml]
		[/filter]
		[filter_attack]
			special=plague
		[/filter_attack]
		[filter_condition]
			[variable]
				name=second_unit.hitpoints
				less_than_equal_to=0
			[/variable]
		[/filter_condition]
#		{DEBUG_MSG "Plague offensive kill detected! dmg $damage_inflicted, hp $second_unit.hitpoints"}
		[event]
			name=side turn end
			delayed_variable_substitution=no
#			{DEBUG_MSG "Checking for plague-kill at $x2,$y2"}
			[if]
				[have_unit]
					x,y=$x2,$y2
					type=Walking Corpse
					side=1
				[/have_unit]
				[then]
#					{DEBUG_MSG "Dominated plague unit gets a kill!"}
					[modify_unit]
						[filter]
							x,y=$x2,$y2					
						[/filter]
						side=1
						[status]
							dominated=yes
						[/status]
						[variables]
							# Note that this $unit is from the enclosing event
							was_side=$unit.variables.was_side
						[/variables]
					[/modify_unit]
				[/then]
			[/if]
		[/event]
	[/event]
	[event]
		name=defender hits
		id=domination_plague_defense
		first_time_only=no
		[filter_second]
			side=1
			[filter_wml]
				[status]
					dominated=yes
				[/status]
			[/filter_wml]
		[/filter_second]
		[filter_second_attack]
			special=plague
		[/filter_second_attack]
		[filter_condition]
			[variable]
				name=unit.hitpoints
				less_than_equal_to=0
			[/variable]
		[/filter_condition]
#		{DEBUG_MSG "Plague defensive kill detected! dmg $damage_inflicted, hp $unit.hitpoints"}
		[event]
			name=side turn end
			delayed_variable_substitution=no
#			{DEBUG_MSG "Checking for plague-kill at $x1,$y1!"}
			[if]
				[have_unit]
					x,y=$x1,$y1
					type=Walking Corpse
					side=1
				[/have_unit]
				[then]
#					{DEBUG_MSG "Dominated plague unit gets a kill!"}
					[modify_unit]
						[filter]
							x,y=$x1,$y1
						[/filter]
						side=1
						[status]
							dominated=yes
						[/status]
						[variables]
							# Note that $second_unit is from the enclosing event
							was_side=$second_unit.variables.was_side
						[/variables]
					[/modify_unit]
				[/then]
			[/if]
		[/event]
	[/event]
	[event]
		name=new turn
		id=domination_capture
		first_time_only=no
		delayed_variable_substitution=yes
		[filter_condition]
			[have_unit]
				{DOMINATION_FILTER}
			[/have_unit]
		[/filter_condition]
#		{DEBUG_MSG "Dominating units!"}
		[store_unit]
			[filter]
				{DOMINATION_FILTER}
			[/filter]
			variable=dominated_units
		[/store_unit]
		# TODO: Genericize so it'll work for more than one unit with the ability
		[scroll_to_unit]
			id=hermitsorceress
		[/scroll_to_unit]
		{FOREACH dominated_units dominated_unit}
			[animate_unit]
				flag=attack
				hits=yes
				text=_"dominated!"
				female_text=_"female^dominated!"
				red,green,blue=255,51,0
				[filter]
					id=hermitsorceress
				[/filter]
				[primary_attack]
					name=entangle
				[/primary_attack]
				[facing]
					[filter]
						id=$dominated_units[$dominated_unit].id
					[/filter]
				[/facing]
				[animate]
					flag=defend
					[filter]
						id=$dominated_units[$dominated_unit].id
					[/filter]
					[secondary_attack]
						range=ranged
					[/secondary_attack]
					[facing]
						[filter]
							id=hermitsorceress
						[/filter]
					[/facing]
				[/animate]
			[/animate_unit]
			[modify_unit]
				[filter]
					id=$dominated_units[$dominated_unit].id
				[/filter]
				side=1
				[status]
					dominated=yes
				[/status]
				[variables]
					was_side=$dominated_units[$dominated_unit].side
				[/variables]
			[/modify_unit]
			[delay]
				time=300
				accelerate=yes
			[/delay]
		{NEXT dominated_unit}
		{CLEAR_VARIABLE dominated_units}
	[/event]
	[event]
		name=victory
		id=domination_dismiss
		first_time_only=no
		[filter_condition]
			[have_unit]
				{DOMINATION_FILTER}
			[/have_unit]
		[/filter_condition]
		[kill]
			animate=no
			{DOMINATION_FILTER}
		[/kill]
	[/event]
#enddef
